apiVersion: v1
kind: Namespace
metadata:
  name: vault
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    helm.sh/chart: vault-0.13.0
  name: vault
  namespace: vault
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault-agent-injector
  name: vault-agent-injector
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    helm.sh/chart: vault-0.13.0
  name: vault-discovery-role
  namespace: vault
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - watch
  - list
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault-agent-injector
  name: vault-agent-injector-clusterrole
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - get
  - list
  - watch
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    helm.sh/chart: vault-0.13.0
  name: vault-discovery-rolebinding
  namespace: vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-discovery-role
subjects:
- kind: ServiceAccount
  name: vault
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault-agent-injector
  name: vault-agent-injector-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vault-agent-injector-clusterrole
subjects:
- kind: ServiceAccount
  name: vault-agent-injector
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    helm.sh/chart: vault-0.13.0
  name: vault-server-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: vault
  namespace: vault
---
apiVersion: v1
data:
  extraconfig-from-values.hcl: "disable_mlock = true\nui = true\nlistener \"tcp\"
    {\n  tls_disable = 1\n  address = \"[::]:8200\"\n  cluster_address = \"[::]:8201\"\n
    \ tls_cert_file = \"/vault/userconfig/vault-tls/vault.crt\"\n  tls_key_file  =
    \"/vault/userconfig/vault-tls/vault.key\"\n  tls_client_ca_file = \"/vault/userconfig/vault-tls/vault.ca\"\n}\nstorage
    \"postgresql\" {\n  connection_url=\"postgres://postgres:postgres@vault-postgres-postgresql.pgsql.svc:5432/vaultdb?sslmode=disable\"\n
    \ table=\"vault_kv_store\",\n  ha_enabled=true,\n  ha_table=\"vault_ha_locks\"
    \n}\n\nservice_registration \"kubernetes\" {}"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    helm.sh/chart: vault-0.13.0
  name: vault-config
  namespace: vault
---
apiVersion: v1
data:
  password: cG9zdGdyZXM=
  username: cG9zdGdyZXM=
kind: Secret
metadata:
  name: vault-postgres-secret
  namespace: vault
type: Opaque
---
apiVersion: v1
data:
  vault.ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJlRENDQVIyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWpNU0V3SHdZRFZRUUREQmhyTTNNdGMyVnkKZG1WeUxXTmhRREUyTWpjd01qYzBNak13SGhjTk1qRXdOekl6TURnd016UXpXaGNOTXpFd056SXhNRGd3TXpRegpXakFqTVNFd0h3WURWUVFEREJock0zTXRjMlZ5ZG1WeUxXTmhRREUyTWpjd01qYzBNak13V1RBVEJnY3Foa2pPClBRSUJCZ2dxaGtqT1BRTUJCd05DQUFUMlUxKzVYaHc3cHRZVTVsSmV4eTRES3ZSa2JOSko1NDRjQTh6VGVyL0wKRkNWTmIzbGNNamdZYnZsWnRKK083MWVvSmdYMDFmV1dLbTJYTXJZQURWZTVvMEl3UURBT0JnTlZIUThCQWY4RQpCQU1DQXFRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVW5hNGthaGN1ak5FcjhoaTl1RGkvCll3NVRBbGt3Q2dZSUtvWkl6ajBFQXdJRFNRQXdSZ0loQUlySmFxZzNQdnByZkpYN0o5ODhqMUNHblVZMS9vS3QKRGx2SzVPaWxhcjdCQWlFQWlvZzVKc1hUL24rdVgwcTc4OGw4amF2ZnNxczBsSnJQTzR1cllzdkE1ejg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  vault.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNzakNDQWxtZ0F3SUJBZ0lRSjF5aER2eDhiRFFvK2FwYU51OUJBakFLQmdncWhrak9QUVFEQWpBak1TRXcKSHdZRFZRUUREQmhyTTNNdFkyeHBaVzUwTFdOaFFERTJNamN3TWpjME1qTXdIaGNOTWpFd056SXpNRGt3TkRBMQpXaGNOTWpJd056SXpNRGt3TkRBMVdqQWFNUmd3RmdZRFZRUURFdzkyWVhWc2RDNTJZWFZzZEM1emRtTXdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3ppM3RHbTdjVWgxQjMrN1JLUGdEODRpRkEKaDhpTzRWM1RRcG11ZUxZN2lkdVFGWGxtZ1FKbzhHamxrbk16dkw5ZkxiU2RvOG1KRmJvak8xK1EybVFKVmI3egplVjEvNSt1RWhLaWUrN2FZTU1VZCt2blJBOHRpVWFZVVdyVFl5NkN5NlRTZitxN2tFRDJtRktKSVErTFFtSFBuCkphSE1BVWdLVTRTU3BxYWFpQTZ3eDdHS1RLRVNFeHNVNHNVUEFaQ3VPczdPdElQMDJoUnFZQWtxVElGeTlsenEKdXN4N2tDQ2Jnb0YvbVVoMGFSWW1VaWhSaENjdG9PRjNrMnVPTDdMUFdpWDJRTGFWbmt0d1g1bmorZ2t6eURWVgo2UEs1WFdYdm1CT05sTUdmM1RTd3RQNTNIb3gxQU44cDNpL2NOVCttdTVTYXV4aHBVODhaN0E5NHB3THhBZ01CCkFBR2pnYXd3Z2Frd0RnWURWUjBQQVFIL0JBUURBZ1dnTUJNR0ExVWRKUVFNTUFvR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVU5SE1SU2tmNThKWE8vU0hmdFRVN1NpRitHeUV3VXdZRApWUjBSQkV3d1NvSUZkbUYxYkhTQ0MzWmhkV3gwTG5aaGRXeDBnZzkyWVhWc2RDNTJZWFZzZEM1emRtT0NIWFpoCmRXeDBMblpoZFd4MExuTjJZeTVqYkhWemRHVnlMbXh2WTJGc2h3Ui9BQUFCTUFvR0NDcUdTTTQ5QkFNQ0EwY0EKTUVRQ0lBejNHbTBtdWhyd2NFWDU1RllqUWcvRXZHRFBEMUVhWUpjMmNyM1h6eGdwQWlBOG5oekhxWlVDTG8rZQplQXdjTmNNUjV3TEZRSFF0SnhiN1R1dXR5eFJNdmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  vault.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBczR0N1JwdTNGSWRRZC91MFNqNEEvT0loUUlmSWp1RmQwMEtacm5pMk80bmJrQlY1ClpvRUNhUEJvNVpKek03eS9YeTIwbmFQSmlSVzZJenRma05wa0NWVys4M2xkZitmcmhJU29udnUybURERkhmcjUKMFFQTFlsR21GRnEwMk11Z3N1azBuL3F1NUJBOXBoU2lTRVBpMEpoejV5V2h6QUZJQ2xPRWtxYW1tb2dPc01leAppa3loRWhNYkZPTEZEd0dRcmpyT3pyU0Q5Tm9VYW1BSktreUJjdlpjNnJyTWU1QWdtNEtCZjVsSWRHa1dKbElvClVZUW5MYURoZDVOcmppK3l6MW9sOWtDMmxaNUxjRitaNC9vSk04ZzFWZWp5dVYxbDc1Z1RqWlRCbjkwMHNMVCsKZHg2TWRRRGZLZDR2M0RVL3BydVVtcnNZYVZQUEdld1BlS2NDOFFJREFRQUJBb0lCQUY2VGlMcG02QWUrUjVzTQpVYW9TQXo4eWRzV2hRUHBTcUxQU0QxWWliQXZzMEdXVGlrRitqNkJya3pYcThSZzl3cWtHVUhBQmlQWFhKaGZNCi9NZzI0aDh3dGNkWEZQTjlYVWlQQUt2T2VCNnZBZ2FLMy9GRUNHeWdDZFlLK2R5QlZ3TW5hUHNrZDkvVzFrS1gKOSt3Tkpuc3U4MDY5T2Y5V1pYWmJEQ2liOUlMTmFvdC8weWt2d1p6dE1yMWg3bldFWURGRkQxYlFuT3NDN0lDMgpNZG9KSnJndW5YUVdNNnpJREF0Q0RLY2g5U01Dc0hVZGk5dzJBRGI3WXBVR21NZE9PUnBaUTB6ZkJudHpJN0cyCmJwek9vNUJicmNBTWJUeXMzbDhIekJwSVg3aVB6ZmdrcnhLRjRhakErVmhxaU9EN3Y1UmxoMWpvc05EamRtbjYKUXJUSldvRUNnWUVBNG13MnVibE00dHdsaTZLUWYzbmRDRllxMjZmb0Q1YXNQdVVBcWNpVUlyOUJEL1M0dXhZbwp6Ly9jZnV1YU84MzdyTVAvVUVoTVZrZGVHN3JPdTYwWk1vYkJoQlc2b3hZeU1tUVdyWXJpbFU3S1hzRjRtRVZ2CjJBYVZ0R0FhcGtqVjVlZEtrZWhXT2U3bVdreVpRWVRLNUpteGFBTnliZE1HdU5WeDBZaVJxbmtDZ1lFQXl2K2cKNUVxSWduc013SzU4ZTN1a1RndWtvSlp1MEJZWjJHYWpKWW5qNkpPNDc5eGVISllZb1RETjY5a2EwM3ZaT1JocgppNWtqNk5SZ29YVVllREJwZ2dPN2pDSTFWeC9IZHNKd2xFbFU2UDVmaTNvZ2pXZUhRWjZoUTVkV2h1Tm9uRjVuCmdoVmx4S2pSakpTKzkzc2prODcrTVVvSE84V25vdHNZN2d5MC9qa0NnWUJJelNLTGROa1QyRlQ2SUxyMVFlbWYKMUpUVEs1bWg2WUJZZUtsTjdnQXphK3N2aGpBZmQzQ0g4R3lsSW52azNzWWROcWZRMkc0ekQ1OWlxeDN0bWlxUAo1R1EwWkFndWgrUjc3MUtiV2h5Z2hVVHNVcWpEelErNUZlVHNxam5uWFdQcEdBVVNCUEkwam12aWZONktBbmg2CktEQ3lrT2txQnNBU2pnNmFvSjYxZ1FLQmdFaGhyYlM0L3NQSHJGeG4ydXNNd3lFdzlacHRDVVlaRzA0V0NzWXYKekp2NVVFLzJlM2dsN05KTTNKL2o0YlRXekRXWGg0RlhNWDZyZTJrV240cjdlQ05yd1V2T1JzYXlCaVZLWDJvQQpXODVZSlNsT2Vwenc5VUZvbG9mTFJvY0NQeUxDWnBYem16M3NGQXZVWGVOUWZQY1BMNFBUcVpDZWdZK0lIL09CCmhHZkJBb0dCQU9HSE91anFxU2hoaE93b0xJRy8wRytIc1FqWlJvdEFaWHBjY00yRzUrZUlLMXpBbDIwUG5tSUsKOW8xQ0owTzAvT0w0aHZGL1RGY09uWmpSa2FhcnRKajNvTDVnamRYL1EvOS9Nall2ZFNlMmRwQU1hVTlRNzlXbwp1UVJ5L2FjSG1nU3NTY0xMODNCOUlCdjd5eFF1Q1lDSldUbHdSTXNVWlVrMDJaZmdlWWZVCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  name: vault-tls
  namespace: vault
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    helm.sh/chart: vault-0.13.0
  name: vault
  namespace: vault
spec:
  ports:
  - name: https
    port: 8200
    targetPort: 8200
  - name: https-internal
    port: 8201
    targetPort: 8201
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/name: vault
    component: server
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    helm.sh/chart: vault-0.13.0
  name: vault-active
  namespace: vault
spec:
  ports:
  - name: https
    port: 8200
    targetPort: 8200
  - name: https-internal
    port: 8201
    targetPort: 8201
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/name: vault
    component: server
    vault-active: "true"
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault-agent-injector
  name: vault-agent-injector-svc
  namespace: vault
spec:
  ports:
  - name: https
    port: 443
    targetPort: 8080
  selector:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/name: vault-agent-injector
    component: webhook
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    helm.sh/chart: vault-0.13.0
  name: vault-internal
  namespace: vault
spec:
  clusterIP: None
  ports:
  - name: https
    port: 8200
    targetPort: 8200
  - name: https-internal
    port: 8201
    targetPort: 8201
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/name: vault
    component: server
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    helm.sh/chart: vault-0.13.0
  name: vault-standby
  namespace: vault
spec:
  ports:
  - name: https
    port: 8200
    targetPort: 8200
  - name: https-internal
    port: 8201
    targetPort: 8201
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/name: vault
    component: server
    vault-active: "false"
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault-ui
    helm.sh/chart: vault-0.13.0
  name: vault-ui
  namespace: vault
spec:
  ports:
  - name: https
    port: 8200
    targetPort: 8200
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/name: vault
    component: server
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault-agent-injector
    component: webhook
  name: vault-agent-injector
  namespace: vault
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: vault
      app.kubernetes.io/name: vault-agent-injector
      component: webhook
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: vault
        app.kubernetes.io/name: vault-agent-injector
        component: webhook
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/instance: vault
                app.kubernetes.io/name: vault-agent-injector
                component: webhook
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - agent-inject
        - 2>&1
        env:
        - name: AGENT_INJECT_LISTEN
          value: :8080
        - name: AGENT_INJECT_LOG_LEVEL
          value: debug
        - name: AGENT_INJECT_VAULT_ADDR
          value: https://vault.default.svc:8200
        - name: AGENT_INJECT_VAULT_AUTH_PATH
          value: auth/kubernetes
        - name: AGENT_INJECT_VAULT_IMAGE
          value: vault:1.7.3
        - name: AGENT_INJECT_TLS_CERT_FILE
          value: /etc/webhook/certs/vault.crt
        - name: AGENT_INJECT_TLS_KEY_FILE
          value: /etc/webhook/certs/vault.key
        - name: AGENT_INJECT_LOG_FORMAT
          value: standard
        - name: AGENT_INJECT_REVOKE_ON_SHUTDOWN
          value: "false"
        - name: AGENT_INJECT_TELEMETRY_PATH
          value: /metrics
        - name: AGENT_INJECT_CPU_REQUEST
          value: 250m
        - name: AGENT_INJECT_CPU_LIMIT
          value: 500m
        - name: AGENT_INJECT_MEM_REQUEST
          value: 64Mi
        - name: AGENT_INJECT_MEM_LIMIT
          value: 128Mi
        - name: AGENT_INJECT_DEFAULT_TEMPLATE
          value: map
        - name: AGENT_INJECT_VAULT_ADDR
          value: https://vault.vault.svc:8200
        image: hashicorp/vault-k8s:0.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 2
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 5
        name: sidecar-injector
        readinessProbe:
          failureThreshold: 2
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 250m
            memory: 256Mi
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /etc/webhook/certs
          name: webhook-certs
          readOnly: true
      hostNetwork: false
      securityContext:
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 100
      serviceAccountName: vault-agent-injector
      volumes:
      - name: webhook-certs
        secret:
          secretName: vault-tls
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
  name: vault
  namespace: vault
spec:
  podManagementPolicy: Parallel
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/instance: vault
      app.kubernetes.io/name: vault
      component: server
  serviceName: vault-internal
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: vault
        app.kubernetes.io/name: vault
        component: server
        helm.sh/chart: vault-0.13.0
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/instance: vault
                app.kubernetes.io/name: vault-agent-injector
                component: webhook
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n[
          -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n[
          -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n[
          -n \"${HOSTNAME}\" ] && sed -Ei \"s|HOSTNAME|${HOSTNAME?}|g\" /tmp/storageconfig.hcl;\n[
          -n \"${API_ADDR}\" ] && sed -Ei \"s|API_ADDR|${API_ADDR?}|g\" /tmp/storageconfig.hcl;\n[
          -n \"${TRANSIT_ADDR}\" ] && sed -Ei \"s|TRANSIT_ADDR|${TRANSIT_ADDR?}|g\"
          /tmp/storageconfig.hcl;\n[ -n \"${RAFT_ADDR}\" ] && sed -Ei \"s|RAFT_ADDR|${RAFT_ADDR?}|g\"
          /tmp/storageconfig.hcl;\n/usr/local/bin/docker-entrypoint.sh vault server
          -config=/tmp/storageconfig.hcl \n"
        command:
        - /bin/sh
        - -ec
        env:
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: VAULT_K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: VAULT_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: VAULT_ADDR
          value: https://127.0.0.1:8200
        - name: VAULT_API_ADDR
          value: https://$(POD_IP):8200
        - name: SKIP_CHOWN
          value: "true"
        - name: SKIP_SETCAP
          value: "true"
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: VAULT_CLUSTER_ADDR
          value: https://$(HOSTNAME).vault-internal:8201
        - name: HOME
          value: /home/vault
        - name: VAULT_LOG_LEVEL
          value: debug
        - name: VAULT_LOG_FORMAT
          value: standard
        - name: VAULT_ADDR
          value: http://$(HOSTNAME).vault-internal.vault.svc:8200
        - name: VAULT_CACERT
          value: /vault/userconfig/vault-tls/vault.ca
        image: hashicorp/vault:1.7.3
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - sleep 5 && kill -SIGTERM $(pidof vault)
        name: vault
        ports:
        - containerPort: 8200
          name: https
        - containerPort: 8201
          name: https-internal
        - containerPort: 8202
          name: https-rep
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -ec
            - vault status -tls-skip-verify
          failureThreshold: 2
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 1000m
            memory: 1000Mi
          requests:
            cpu: 500m
            memory: 500Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /vault/audit
          name: audit
        - mountPath: /vault/config
          name: config
        - mountPath: /vault/userconfig/vault-tls
          name: userconfig-vault-tls
          readOnly: true
        - mountPath: /home/vault
          name: home
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 100
      serviceAccountName: vault
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: vault-config
        name: config
      - name: userconfig-vault-tls
        secret:
          defaultMode: 420
          secretName: vault-tls
      - emptyDir: {}
        name: home
  updateStrategy:
    type: OnDelete
  volumeClaimTemplates:
  - metadata:
      name: audit
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
    helm.sh/chart: vault-0.13.0
  name: vault
  namespace: vault
spec:
  maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/instance: vault
      app.kubernetes.io/name: vault
      component: server
---
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: vault-csr
spec:
  groups:
  - system:authenticated
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQzlqQ0NBZDRDQVFBd0dqRVlNQllHQTFVRUF3d1BkbUYxYkhRdWRtRjFiSFF1YzNaak1JSUJJakFOQmdrcQpoa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXM0dDdScHUzRklkUWQvdTBTajRBL09JaFFJZklqdUZkCjAwS1pybmkyTzRuYmtCVjVab0VDYVBCbzVaSnpNN3kvWHkyMG5hUEppUlc2SXp0ZmtOcGtDVlcrODNsZGYrZnIKaElTb252dTJtRERGSGZyNTBRUExZbEdtRkZxMDJNdWdzdWswbi9xdTVCQTlwaFNpU0VQaTBKaHo1eVdoekFGSQpDbE9Fa3FhbW1vZ09zTWV4aWt5aEVoTWJGT0xGRHdHUXJqck96clNEOU5vVWFtQUpLa3lCY3ZaYzZyck1lNUFnCm00S0JmNWxJZEdrV0psSW9VWVFuTGFEaGQ1TnJqaSt5ejFvbDlrQzJsWjVMY0YrWjQvb0pNOGcxVmVqeXVWMWwKNzVnVGpaVEJuOTAwc0xUK2R4Nk1kUURmS2Q0djNEVS9wcnVVbXJzWWFWUFBHZXdQZUtjQzhRSURBUUFCb0lHVwpNSUdUQmdrcWhraUc5dzBCQ1E0eGdZVXdnWUl3Q1FZRFZSMFRCQUl3QURBTEJnTlZIUThFQkFNQ0JlQXdFd1lEClZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdFd1V3WURWUjBSQkV3d1NvSUZkbUYxYkhTQ0MzWmhkV3gwTG5aaGRXeDAKZ2c5MllYVnNkQzUyWVhWc2RDNXpkbU9DSFhaaGRXeDBMblpoZFd4MExuTjJZeTVqYkhWemRHVnlMbXh2WTJGcwpod1IvQUFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQU4rTlg0ZG8vQWVjZW5LOG05ZVFPOEw2SEh1STlCCndpeWRTd0hlMWdBWG5sVm9YaXdZVC81bWg0Zy9wUEFmeFdVNzE1U2J6RkRYRGFSekU5UGo4OGlxWlRvWFAwQnAKM3doaVh1Q0MxUlN2TElCWHByMUF2MG1QYnk0OEpSUWFwcFkrQk1UMVRsWkJkdjFyV1V4dUJvNCs5SVFpaG01WApSN2lVUDVJZ3g0TnpjUFNnaStId245dHBlRFVrVmtUS3hrRGp1UjZvRHhLbTRhOSsvQVdMYUpaekJZdE5pMjdUCjB1WTI4M1pMTUpFR1ZLOXphVzRjUmJEOUZ3Mk8zcUVyanRjVFpacFNSS1c2d0NmVTZMS1ZZbFJoTHNGa3YreGkKTHBBaUFOWlVHQnhvS2ZpejNWWUt1QXJsR3IzaXo4Z3FVVndBTUR4aE8zMXQwQlZXTVJrOFczcTQKLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg==
  signerName: kubernetes.io/kube-apiserver-client
  usages:
  - digital signature
  - key encipherment
  - client auth
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  name: vault-server-test
  namespace: vault
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - |
      echo "Checking for sealed info in 'vault status' output"
      ATTEMPTS=10
      n=0
      until [ "$n" -ge $ATTEMPTS ]
      do
        echo "Attempt" $n...
        vault status -format yaml | grep -E '^sealed: (true|false)' && break
        n=$((n+1))
        sleep 5
      done
      if [ $n -ge $ATTEMPTS ]; then
        echo "timed out looking for sealed info in 'vault status' output"
        exit 1
      fi

      exit 0
    env:
    - name: VAULT_ADDR
      value: https://vault.default.svc:8200
    image: hashicorp/vault:1.7.3
    imagePullPolicy: IfNotPresent
    name: vault-server-test
  restartPolicy: Never
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/instance: vault
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault-agent-injector
  name: vault-agent-injector-cfg
webhooks:
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJlRENDQVIyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWpNU0V3SHdZRFZRUUREQmhyTTNNdGMyVnkKZG1WeUxXTmhRREUyTWpjd01qYzBNak13SGhjTk1qRXdOekl6TURnd016UXpXaGNOTXpFd056SXhNRGd3TXpRegpXakFqTVNFd0h3WURWUVFEREJock0zTXRjMlZ5ZG1WeUxXTmhRREUyTWpjd01qYzBNak13V1RBVEJnY3Foa2pPClBRSUJCZ2dxaGtqT1BRTUJCd05DQUFUMlUxKzVYaHc3cHRZVTVsSmV4eTRES3ZSa2JOSko1NDRjQTh6VGVyL0wKRkNWTmIzbGNNamdZYnZsWnRKK083MWVvSmdYMDFmV1dLbTJYTXJZQURWZTVvMEl3UURBT0JnTlZIUThCQWY4RQpCQU1DQXFRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVW5hNGthaGN1ak5FcjhoaTl1RGkvCll3NVRBbGt3Q2dZSUtvWkl6ajBFQXdJRFNRQXdSZ0loQUlySmFxZzNQdnByZkpYN0o5ODhqMUNHblVZMS9vS3QKRGx2SzVPaWxhcjdCQWlFQWlvZzVKc1hUL24rdVgwcTc4OGw4amF2ZnNxczBsSnJQTzR1cllzdkE1ejg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    service:
      name: vault-agent-injector-svc
      namespace: vault
      path: /mutate
  failurePolicy: Ignore
  name: vault.hashicorp.com
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - pods
  sideEffects: None
