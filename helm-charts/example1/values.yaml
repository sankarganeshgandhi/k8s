## Default values for department-service.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.
test:
  enabled: false

dataCenterLocation: onpremise
dataCenterName: datacenter1
kubernetesClusterName: infradev
jaegerEndpoint: http://jaeger-collector.tracing:14268/api/traces

image:
  repository: "sankarganeshg/helm-refimpl"
  pullPolicy: "Always"
  ## Overrides the image tag whose default is the chart appVersion.
  tag: "0.1.0"

imagePullSecrets: []

replicaCount: 1

nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

serviceAccount:
  ## Specifies whether a service account should be created
  create: true
  ## Annotations to add to the service account
  annotations: {}
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  type: ClusterIP
  port: 8080
  ## underlying platform technology (either "java-spring", "java-quarkus" or ".net5" ) of the ITM to be mentioned here
  platform: "java-quarkus"
  readinessProbeUrl: /q/health/ready
  livenessProbeUrl: /q/health/live

####################################################################################################
##
## Your configuration of the ITM starts here
##
####################################################################################################
swaggerui:
  enabled: true

env: 
  STOCK_RESERVING_CLIENT_MP_REST_URL: http://tracing-consumer:8080

####################################################################################################
##
## If your ITM depend on PostgreSQLDB to be created, PostgreSQL configurations goes here
##
####################################################################################################
database:
  service: 
    enabled: true
    platform: postgresql
    name: psqldb
    replicas: 1
    diskVolume: 2Gi
    databseSchemaName: wplat1-3
    teamId: wplat
    superUserName: scbuser
    databaseUserName: dbuser1
  secretName: sankarganeshg.wplat-postgres.credentials
  usernameKey: username
  passwordKey: password
  connectionUrl: jdbc:postgresql://wplat-psqldb:5432/wplat1-3

####################################################################################################
##
## If your ITM depend on Kafka, Kafka configurations goes here
##
####################################################################################################
kafka:
  server:
    enabled: false
    config:
      name: kafka
      replicas: 1
      listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
  bootstrapServerUrl: kafka-kafka-bootstrap.kafka.svc:9092
  topics:
    enabled: true
    ## Kafka bootstrap server to connect
    ## for authorization to work create the topics and users in the Kafka's namespace
    kafkaClusterName: kafka
    config:
      - topic:
        name: ful-fillment-order ##topic name is prefixed with namespace or something random
        partitions: 1
        replicas: 1
        retentionInMS: '604800000'
        segmentInBytes: '1073741824'
        users:
          - userName: producer-user
            consumerGroup: producer-group
            userACL:
              - Read
              - Describe
              - Write
              - Create
          - userName: consumer-user
            consumerGroup: consumer-group
            userACL:
              - Read
              - Describe
      - topic:
        name: ful-fillment-order-created-from-rest
        partitions: 1
        replicas: 1
        retentionInMS: '604800000'
        segmentInBytes: '1073741824'
        users:
          - userName: producer-user
            consumerGroup: producer-group
            userACL:
              - Read
              - Describe
              - Write
              - Create
          - userName: consumer-user
            consumerGroup: consumer-group
            userACL:
              - Read
              - Describe
      - topic:
        name: stock-reserved
        partitions: 1
        replicas: 1
        retentionInMS: '604800000'
        segmentInBytes: '1073741824'
        users:
          - userName: producer-user
            consumerGroup: producer-group
            userACL:
              - Read
              - Describe
          - userName: consumer-user
            consumerGroup: consumer-group
            userACL:
              - Read
              - Describe
              - Write
              - Create
  clientSecurity:
    truststoreFileLocation: /etc/kafka-credentials/kafka-truststore-jks/truststore.jks
    truststorePassword: password
    keystoreFileLocation: /etc/kafka-credentials/kafka-user-p12/producer-user.p12
    keystorePassword: '1234567'
####################################################################################################
##
## Kafka configurations ends here
##
####################################################################################################
##
## If the API's of your ITM has to be exposed outside the K8S cluster, it should be done only through
## Ingress. Your ingress configuration starts here
##
####################################################################################################
ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: kafka-producer
      paths: []
  tls: []
  #  - secretName: kafka-producer-tls
  #    hosts:
  #      - kafka-producer.local
####################################################################################################
##
## Ingress configuration ends here
##
####################################################################################################
